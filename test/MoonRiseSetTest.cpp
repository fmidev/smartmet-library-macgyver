// ======================================================================
/*!
 * \file
 * \brief Regression tests for Fmi::TimeZoneFactory
 */
// ======================================================================

#include "Astronomy.h"
#include "TimeZoneFactory.h"
#include "boost/date_time/posix_time/posix_time.hpp"  //include all types plus i/o
#include <boost/algorithm/string.hpp>
#include <boost/date_time/local_time/local_time.hpp>
#include <boost/foreach.hpp>
#include <boost/lexical_cast.hpp>
#include <regression/tframe.h>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>

using namespace std;
using boost::local_time::time_zone_ptr;
using namespace Fmi::Astronomy;
using namespace boost::gregorian;
using namespace boost::local_time;
using namespace boost::posix_time;
using namespace boost;

bool allow_missing_dates(true);

std::vector<string> honolulu_2008()
{
  std::vector<string> result_strings;

  result_strings.push_back(
      "01  0129 1303  0251 1340  0227 1314  0322 1448  0308 1525  0341 1719  0416 1825  0625 1942  "
      "0801 2002  0832 1948  0958 2047  1013 2121");
  result_strings.push_back(
      "02  0220 1338  0345 1431  0318 1410  0401 1546  0345 1625  0433 1830  0523 1927  0727 2021  "
      "0855 2036  0926 2029  1048 2140  1052 2214");
  result_strings.push_back(
      "03  0312 1417  0438 1526  0405 1508  0438 1644  0424 1728  0532 1941  0633 2022  0825 2057  "
      "0948 2113  1021 2114  1133 2234  1128 2306");
  result_strings.push_back(
      "04  0406 1500  0527 1624  0449 1606  0515 1743  0507 1834  0638 2047  0741 2109  0920 2131  "
      "1042 2152  1114 2203  1215 2328  1203 2358");
  result_strings.push_back(
      "05  0501 1549  0614 1723  0529 1705  0553 1845  0555 1945  0747 2145  0844 2150  1013 2205  "
      "1137 2235  1206 2255  1254       1236     ");
  result_strings.push_back(
      "06  0555 1641  0656 1821  0608 1803  0634 1950  0651 2056  0855 2235  0943 2227  1106 2240  "
      "1231 2321  1254 2348  1330 0021  1310 0051");
  result_strings.push_back(
      "07  0646 1738  0735 1919  0644 1901  0719 2058  0754 2203  1000 2318  1038 2301  1159 2317  "
      "1324       1339       1405 0114  1346 0145");
  result_strings.push_back(
      "08  0735 1836  0812 2016  0721 2001  0810 2207  0900 2304  1059 2355  1132 2334  1253 2357  "
      "1414 0011  1420 0043  1440 0208  1426 0243");
  result_strings.push_back(
      "09  0819 1934  0848 2114  0800 2103  0907 2315  1007 2357  1155       1223       1347       "
      "1502 0104  1459 0138  1516 0303  1511 0345");
  result_strings.push_back(
      "10  0859 2031  0924 2212  0841 2207  1009       1111       1248 0029  1315 0007  1440 0041  "
      "1546 0159  1535 0232  1554 0401  1603 0451");
  result_strings.push_back(
      "11  0937 2127  1002 2313  0927 2313  1114 0017  1212 0042  1339 0102  1408 0042  1533 0129  "
      "1626 0255  1610 0327  1637 0503  1703 0601");
  result_strings.push_back(
      "12  1012 2223  1043       1018       1218 0113  1308 0121  1430 0134  1501 0120  1622 0220  "
      "1704 0351  1646 0423  1727 0608  1811 0711");
  result_strings.push_back(
      "13  1047 2319  1130 0016  1116 0020  1320 0201  1401 0156  1521 0208  1555 0201  1709 0315  "
      "1740 0446  1724 0520  1823 0718  1921 0816");
  result_strings.push_back(
      "14  1123       1222 0121  1217 0124  1417 0243  1452 0229  1614 0243  1648 0246  1751 0411  "
      "1815 0542  1804 0621  1927 0828  2030 0914");
  result_strings.push_back(
      "15  1201 0017  1321 0227  1321 0224  1512 0320  1543 0301  1707 0321  1740 0336  1831 0507  "
      "1851 0638  1850 0724  2035 0934  2136 1004");
  result_strings.push_back(
      "16  1244 0119  1424 0330  1424 0316  1604 0354  1634 0333  1801 0404  1828 0429  1907 0602  "
      "1929 0736  1941 0831  2142 1034  2237 1048");
  result_strings.push_back(
      "17  1333 0223  1529 0428  1525 0402  1655 0427  1725 0407  1853 0451  1913 0524  1942 0657  "
      "2010 0836  2039 0939  2248 1127  2334 1126");
  result_strings.push_back(
      "18  1429 0330  1632 0520  1622 0443  1746 0459  1818 0443  1944 0541  1954 0619  2017 0752  "
      "2057 0939  2143 1046  2349 1212       1202");
  result_strings.push_back(
      "19  1531 0437  1733 0605  1717 0519  1838 0531  1912 0522  2031 0635  2032 0715  2052 0847  "
      "2149 1044  2248 1148       1252  0029 1236");
  result_strings.push_back(
      "20  1637 0541  1831 0644  1809 0553  1930 0606  2005 0606  2114 0730  2107 0809  2130 0945  "
      "2247 1150  2353 1243  0046 1328  0122 1310");
  result_strings.push_back(
      "21  1744 0638  1925 0720  1901 0625  2023 0643  2058 0654  2154 0825  2141 0903  2212 1044  "
      "2350 1254       1331  0141 1401  0214 1346");
  result_strings.push_back(
      "22  1848 0728  2018 0754  1952 0657  2117 0724  2147 0746  2230 0919  2215 0957  2259 1147  "
      "     1353  0055 1413  0233 1435  0307 1423");
  result_strings.push_back(
      "23  1948 0811  2110 0826  2044 0731  2211 0809  2233 0839  2305 1013  2251 1052  2353 1252  "
      "0055 1446  0154 1451  0326 1509  0401 1505");
  result_strings.push_back(
      "24  2044 0849  2201 0859  2137 0806  2302 0858  2315 0934  2339 1107  2330 1150       1357  "
      "0159 1532  0250 1526  0418 1545  0455 1549");
  result_strings.push_back(
      "25  2138 0924  2253 0932  2231 0845  2351 0950  2354 1029       1201       1250  0053 1500  "
      "0301 1613  0344 1600  0511 1624  0548 1638");
  result_strings.push_back(
      "26  2229 0957  2346 1009  2325 0927       1045       1124  0014 1257  0013 1354  0157 1558  "
      "0400 1650  0437 1633  0606 1706  0639 1730");
  result_strings.push_back(
      "27  2320 1028       1048       1013  0036 1140  0030 1218  0051 1357  0103 1501  0304 1650  "
      "0456 1725  0530 1708  0700 1753  0727 1823");
  result_strings.push_back(
      "28       1101  0040 1132  0018 1104  0117 1236  0105 1313  0132 1500  0200 1608  0409 1735  "
      "0550 1759  0623 1745  0753 1842  0812 1917");
  result_strings.push_back(
      "29  0011 1135  0134 1221  0109 1158  0155 1332  0140 1409  0219 1608  0304 1711  0511 1816  "
      "0644 1834  0717 1826  0843 1934  0852 2010");
  result_strings.push_back(
      "30  0103 1213             0157 1254  0232 1428  0216 1509  0313 1717  0411 1808  0610 1853  "
      "0738 1910  0812 1909  0930 2028  0929 2102");
  result_strings.push_back(
      "31  0156 1254             0241 1351             0256 1612             0519 1858  0706 1927  "
      "           0906 1957             1004 2153");

  return result_strings;
}

std::vector<string> newyork_2008()
{
  std::vector<string> result_strings;

  result_strings.push_back(
      "01  0105 1152  0301 1153  0243 1122  0417 1424  0333 1533  0318 1812  0324 1936  0555 2028  "
      "0819 2006  0920 1922  1112 1959  1017 1946");
  result_strings.push_back(
      "02  0207 1216  0400 1240  0332 1221  0445 1534  0357 1645  0356 1934  0430 2036  0711 2055  "
      "0925 2029  1025 1954  1101 1954  1049 2049");
  result_strings.push_back(
      "03  0309 1244  0453 1335  0414 1326  0510 1645  0422 1801  0444 2051  0545 2123  0823 2119  "
      "1031 2054  1127 2031  1142 2053  1115 2152");
  result_strings.push_back(
      "04  0411 1318  0540 1438  0449 1435  0534 1757  0450 1921  0545 2157  0704 2201  0931 2142  "
      "1135 2122  1226 2115  1218 2155  1139 2255");
  result_strings.push_back(
      "05  0512 1400  0619 1545  0519 1545  0558 1912  0525 2043  0656 2250  0821 2230  1038 2204  "
      "1239 2155  1320 2206  1248 2259  1202 2359");
  result_strings.push_back(
      "06  0610 1450  0652 1655  0546 1657  0625 2031  0608 2203  0813 2332  0934 2255  1142 2227  "
      "1340 2235  1406 2303  1314       1224     ");
  result_strings.push_back(
      "07  0701 1548  0720 1806  0610 1809  0655 2151  0702 2315  0930       1043 2318  1247 2253  "
      "1438 2322  1446       1338 0003  1248 0105");
  result_strings.push_back(
      "08  0744 1653  0745 1916  0634 1922  0733 2311  0807       1043 0004  1149 2340  1350 2323  "
      "1529       1520 0004  1401 0109  1314 0214");
  result_strings.push_back(
      "09  0820 1801  0808 2027  0759 2137  0819       0920 0014  1152 0031  1253       1453 2358  "
      "1613 0016  1548 0109  1424 0216  1346 0328");
  result_strings.push_back(
      "10  0851 1910  0831 2139  0826 2254  0916 0026  1035 0100  1258 0054  1356 0002  1552       "
      "1650 0115  1614 0214  1449 0326  1425 0446");
  result_strings.push_back(
      "11  0917 2019  0856 2252  0858       1022 0130  1148 0135  1401 0115  1459 0025  1647 0040  "
      "1722 0220  1638 0321  1519 0440  1515 0605");
  result_strings.push_back(
      "12  0941 2127  0923       0937 0012  1134 0222  1257 0204  1503 0136  1602 0052  1736 0130  "
      "1749 0326  1701 0429  1555 0557  1618 0720");
  result_strings.push_back(
      "13  1003 2237  0956 0008  1025 0128  1247 0302  1403 0228  1606 0158  1703 0123  1817 0227  "
      "1814 0433  1726 0539  1639 0717  1732 0824");
  result_strings.push_back(
      "14  1026 2348  1037 0124  1124 0237  1357 0334  1506 0250  1708 0223  1801 0201  1852 0330  "
      "1837 0541  1753 0651  1736 0835  1851 0917");
  result_strings.push_back(
      "15  1051       1128 0237  1231 0336  1505 0401  1609 0311  1810 0251  1854 0246  1922 0435  "
      "1900 0649  1824 0807  1843 0944  2010 0958");
  result_strings.push_back(
      "16  1120 0101  1230 0344  1343 0423  1610 0424  1710 0332  1911 0324  1940 0339  1948 0542  "
      "1925 0800  1903 0926  1958 1041  2125 1030");
  result_strings.push_back(
      "17  1156 0218  1340 0439  1455 0501  1713 0445  1813 0354  2007 0404  2019 0438  2011 0649  "
      "1953 0913  1951 1044  2114 1126  2236 1057");
  result_strings.push_back(
      "18  1241 0335  1454 0524  1605 0531  1815 0505  1915 0419  2058 0452  2051 0542  2034 0756  "
      "2026 1028  2051 1156  2229 1202  2343 1121");
  result_strings.push_back(
      "19  1337 0449  1608 0600  1713 0556  1918 0526  2017 0449  2141 0546  2119 0648  2057 0904  "
      "2107 1144  2159 1258  2339 1230       1144");
  result_strings.push_back(
      "20  1445 0553  1719 0628  1818 0618  2021 0550  2117 0524  2218 0647  2144 0754  2122 1014  "
      "2157 1259  2312 1348       1255  0048 1207");
  result_strings.push_back(
      "21  1559 0646  1827 0653  1922 0639  2124 0616  2212 0606  2249 0751  2206 0900  2150 1126  "
      "2258 1406       1428  0047 1318  0152 1231");
  result_strings.push_back(
      "22  1715 0728  1932 0715  2025 0700  2225 0647  2300 0656  2315 0856  2229 1006  2225 1240  "
      "     1503  0026 1500  0152 1340  0256 1258");
  result_strings.push_back(
      "23  1829 0801  2036 0735  2128 0722  2324 0724  2342 0752  2339 1001  2252 1113  2307 1355  "
      "0007 1550  0138 1527  0256 1403  0359 1330");
  result_strings.push_back(
      "24  1939 0828  2139 0756  2232 0746       0808       0854       1107  2317 1223       1507  "
      "0121 1627  0247 1551  0359 1428  0501 1407");
  result_strings.push_back(
      "25  2045 0851  2242 0819  2334 0814  0017 0900  0016 0958  0001 1213  2347 1335  0001 1612  "
      "0235 1657  0353 1613  0503 1456  0559 1451");
  result_strings.push_back(
      "26  2149 0912  2345 0844       0846  0103 0959  0045 1103  0023 1322       1450  0105 1707  "
      "0347 1723  0458 1635  0606 1529  0652 1542");
  result_strings.push_back(
      "27  2252 0933       0913  0036 0926  0143 1102  0111 1209  0047 1433  0024 1606  0218 1751  "
      "0456 1746  0603 1658  0708 1608  0739 1639");
  result_strings.push_back(
      "28  2354 0954  0047 0948  0133 1013  0216 1208  0135 1316  0115 1549  0111 1718  0334 1826  "
      "0603 1809  0707 1724  0805 1654  0818 1739");
  result_strings.push_back(
      "29       1017  0147 1031  0224 1108  0244 1315  0157 1425  0148 1707  0210 1822  0449 1855  "
      "0709 1831  0812 1754  0856 1747  0851 1842");
  result_strings.push_back(
      "30  0056 1044             0308 1209  0309 1423  0221 1537  0230 1825  0320 1914  0602 1920  "
      "0815 1855  0915 1829  0940 1845  0919 1944");
  result_strings.push_back(
      "31  0159 1115             0345 1315             0247 1653             0437 1955  0712 1943  "
      "           1016 1911             0944 2047");

  return result_strings;
}

std::vector<string> utsjoki_2008()
{
  std::vector<string> result_strings;

  result_strings.push_back(
      "01  0233 1019  ---- ----  ---- ----  0837 1020  0432 1501  0058       **** ****       2313  "
      "0830 1941  1212 1626  ---- ----  ---- ----");
  result_strings.push_back(
      "02  0440 0939  ---- ----  ---- ----  0714 1325  0407 1708  **** ****  **** ****  0444 2233  "
      "1030 1915  ---- ----  ---- ----  1544 1609");
  result_strings.push_back(
      "03  ---- ----  ---- ----  ---- ----  0638 1541  0341 1926  **** ****  **** ****  0709 2205  "
      "1237 1841  ---- ----  ---- ----  1400 1927");
  result_strings.push_back(
      "04  ---- ----  ---- ----  ---- ----  0610 1751  0310 2215  **** ****  **** ****  0914 2142  "
      "1524 1730  ---- ----  ---- ----  1326 2132");
  result_strings.push_back(
      "05  ---- ----  ---- ----  0834 1249  0544 2005  0216       **** ****  0459 0138  1113 2117  "
      "---- ----  ---- ----  1634 1929  1301 2328");
  result_strings.push_back(
      "06  ---- ----  1154 1208  0744 1521  0515 2235  **** ****  **** ****  0747 0039  1313 2049  "
      "---- ----  ---- ----  1537 2201  1239     ");
  result_strings.push_back(
      "07  ---- ----  0954 1551  0712 1734  0436       **** ****  **** ****  0957 0008  1527 2007  "
      "---- ----  ---- ----  1506       1216 0123");
  result_strings.push_back(
      "08  ---- ----  0916 1809  0645 1944  **** ****  **** ****  0812 0254  1156 2320  ---- ----  "
      "---- ----  ---- ----  1442 0005  1150 0326");
  result_strings.push_back(
      "09  ---- ----  0848 2017  0619 2202  **** ****  **** ****  1033 0214  1351 2255  ---- ----  "
      "---- ----  1857 2324  1419 0203  1112 0550");
  result_strings.push_back(
      "10  1221 1557  0822 2225  0546       **** ****  **** ****  1234 0147  1552 2224  ---- ----  "
      "---- ----  1814       1355 0406  **** ****");
  result_strings.push_back(
      "11  1126 1832  0754       0453 0046  **** ****  0800 0538  1427 0124  1819 2128  ---- ----  "
      "2152 2311  1745 0143  1324 0621  **** ****");
  result_strings.push_back(
      "12  1054 2041  0718 0045  **** ****  **** ****  1055 0427  1620 0101  ---- ----  ---- ----  "
      "2024       1721 0348  1225 0914  **** ****");
  result_strings.push_back(
      "13  1027 2245  0557 0356  **** ****  **** ****  1303 0354  1824 0035  ---- ----  ---- ----  "
      "1949 0218  1657 0550  **** ****  **** ****");
  result_strings.push_back(
      "14  1002       **** ****  **** ****  1051 0657  1458 0329  2128 2228  ---- ----  ---- ----  "
      "1922 0430  1630 0800  **** ****  **** ****");
  result_strings.push_back(
      "15  0933 0053  **** ****  **** ****  1321 0606  1649 0306  ---- ----  ---- ----  2246       "
      "1859 0633  1550 1029  **** ****  1606 1414");
  result_strings.push_back(
      "16  0853 0317  **** ****  **** ****  1524 0536  1843 0243  ---- ----  ---- ----  2155 0236  "
      "1833 0837  **** ****  **** ****  1920 1255");
  result_strings.push_back(
      "17  **** ****  **** ****  **** ****  1718 0512  2054 0215  ---- ----  ---- ----  2125 0503  "
      "1802 1051  **** ****  **** ****  2136 1222");
  result_strings.push_back(
      "18  **** ****  **** ****  1227 0728  1910 0449       0135  ---- ----  ---- ----  2100 0709  "
      "1704 1338  **** ****  1929 1518  2338 1157");
  result_strings.push_back(
      "19  **** ****  1155 1028  1448 0645  2109 0424  ---- ----  ---- ----  ---- ----  2036 0909  "
      "**** ****  **** ****  2200 1431       1135");
  result_strings.push_back(
      "20  **** ****  1510 0857  1649 0616  2332 0353  ---- ----  ---- ----  0010 0522  2010 1113  "
      "**** ****  **** ****       1403  0134 1112");
  result_strings.push_back(
      "21  **** ****  1724 0821  1843 0552       0301  ---- ----  ---- ----  2304 0736  1933 1332  "
      "**** ****  **** ****  0006 1340  0333 1044");
  result_strings.push_back(
      "22  **** ****  1923 0754  2038 0528  ---- ----  ---- ----  0254 0507  2240 0936  1738 1716  "
      "**** ****  2305 1751  0202 1318  0549 1001");
  result_strings.push_back(
      "23  1530 1117  2118 0730  2244 0501  ---- ----  ---- ----  0144 0753  2216 1135  **** ****  "
      "**** ****       1712  0356 1254  ---- ----");
  result_strings.push_back(
      "24  1803 1026  2316 0705       0425  ---- ----  ---- ----  0111 0959  2148 1341  **** ****  "
      "2217 2059  0125 1646  0557 1224  ---- ----");
  result_strings.push_back(
      "25  2008 0956       0635  0153 0249  ---- ----  ---- ----  0045 1158  2105 1606  **** ****  "
      "     1928  0326 1623  0826 1129  ---- ----");
  result_strings.push_back(
      "26  2204 0931  0133 0549  ---- ----  ---- ----  0414 0752  0021 1359  **** ****  **** ****  "
      "0136 1853  0422 1500  ---- ----  ---- ----");
  result_strings.push_back(
      "27  2358 0907  ---- ----  ---- ----  ---- ----  0323 1019  2326 1610  **** ****  **** ****  "
      "0351 1827  0619 1435  ---- ----  ---- ----");
  result_strings.push_back(
      "28       0841  ---- ----  ---- ----  ---- ----  0252 1224  2229 1855  **** ****       2156  "
      "0553 1804  0826 1400  ---- ----  ---- ----");
  result_strings.push_back(
      "29  0159 0807  ---- ----  ---- ----  0544 1034  0227 1426  **** ****  **** ****  0135 2101  "
      "0750 1740  1147 1215  ---- ----  ---- ----");
  result_strings.push_back(
      "30  0439 0658             ---- ----  0501 1254  0203 1633  **** ****  **** ****  0418 2030  "
      "0952 1711  ---- ----  ---- ----  1225 1657");
  result_strings.push_back(
      "31  ---- ----             ---- ----             0136 1858             **** ****  0629 2005  "
      "           ---- ----             1145 1908");

  return result_strings;
}

std::vector<string> oulu_2008()
{
  std::vector<string> result_strings;

  result_strings.push_back(
      "01  0210 1058  ---- ----  ---- ----  0648 1218  0423 1517  0155 2032  **** ****  0330 2223  "
      "0832 1958  1111 1742  ---- ----  1347 1639");
  result_strings.push_back(
      "02  0349 1045  ---- ----  ---- ----  0631 1415  0413 1706  0138 2331  **** ****  0542 2211  "
      "1014 1948  1305 1724  ---- ----  1324 1840");
  result_strings.push_back(
      "03  0538 1027  ---- ----  ---- ----  0619 1607  0403 1902  0048       **** ****  0739 2200  "
      "1158 1936  1541 1629  ---- ----  1310 2026");
  result_strings.push_back(
      "04  0756 0946  ---- ----  0752 1155  0608 1758  0351 2110  **** ****  0400 0045  0925 2151  "
      "1347 1922  ---- ----  1530 1907  1300 2206");
  result_strings.push_back(
      "05  ---- ----  1007 1218  0729 1402  0557 1953  0337 2341  **** ****  0627 0019  1107 2141  "
      "1550 1856  ---- ----  1510 2104  1251 2344");
  result_strings.push_back(
      "06  ---- ----  0929 1444  0714 1559  0546 2155  0311       0346 0333  0829 0005  1248 2130  "
      "---- ----  ---- ----  1457 2249  1243     ");
  result_strings.push_back(
      "07  ---- ----  0909 1645  0702 1750  0533       **** ****  0704 0220  1018 2344  1432 2118  "
      "---- ----  1859 2013  1447       1235 0123");
  result_strings.push_back(
      "08  ---- ----  0856 1837  0651 1942  0514 0012  **** ****  0913 0202  1200 2335  1625 2100  "
      "---- ----  1813 2240  1438 0031  1226 0308");
  result_strings.push_back(
      "09  1133 1512  0845 2025  0640 2138  0411 0323  **** ****  1105 0149  1338 2325  1847 2016  "
      "---- ----  1755       1430 0213  1215 0503");
  result_strings.push_back(
      "10  1107 1720  0834 2215  0627 2343  **** ****  0721 0432  1247 0139  1518 2314  ---- ----  "
      "2023 2309  1743 0035  1421 0358  1200 0714");
  result_strings.push_back(
      "11  1052 1914  0822       0612       **** ****  0945 0402  1425 0130  1702 2301  ---- ----  "
      "1955       1733 0222  1411 0551  1112 1010");
  result_strings.push_back(
      "12  1040 2102  0810 0010  0546 0207  **** ****  1143 0347  1601 0121  1858 2239  ---- ----  "
      "1939 0119  1724 0406  1358 0756  **** ****");
  result_strings.push_back(
      "13  1029 2248  0752 0217  **** ****  0959 0611  1328 0336  1740 0111  ---- ----  ---- ----  "
      "1928 0312  1715 0552  1335 1024  **** ****");
  result_strings.push_back(
      "14  1018       0714 0452  **** ****  1210 0548  1506 0326  1926 0100  ---- ----  2157       "
      "1918 0459  1705 0742  **** ****  1528 1255");
  result_strings.push_back(
      "15  1007 0036  **** ****  **** ****  1402 0534  1642 0317  2129 0045  ---- ----  2136 0155  "
      "1908 0644  1653 0941  **** ****  1802 1227");
  result_strings.push_back(
      "16  0954 0233  **** ****  **** ****  1545 0522  1818 0307       0017  ---- ----  2122 0355  "
      "1858 0830  1636 1156  **** ****  2009 1214");
  result_strings.push_back(
      "17  0934 0444  **** ****  1126 0653  1722 0513  1959 0257  ---- ----  ---- ----  2111 0545  "
      "1847 1023  1528 1511  1830 1430  2201 1204");
  result_strings.push_back(
      "18  **** ****  1126 0911  1331 0632  1858 0503  2148 0245  ---- ----  0011 0211  2101 0730  "
      "1834 1225  **** ****  2043 1412  2345 1155");
  result_strings.push_back(
      "19  **** ****  1359 0832  1522 0619  2036 0453       0228  ---- ----  2318 0430  2051 0913  "
      "1809 1446  **** ****  2239 1400       1147");
  result_strings.push_back(
      "20  **** ****  1601 0815  1704 0608  2220 0442  0007 0147  ---- ----  2305 0624  2041 1059  "
      "**** ****  1916 1801       1351  0125 1138");
  result_strings.push_back(
      "21  **** ****  1750 0802  1842 0557       0428  ---- ----  0142 0450  2255 0809  2029 1252  "
      "**** ****  2201 1715  0025 1342  0305 1129");
  result_strings.push_back(
      "22  1428 1036  1932 0751  2020 0547  0016 0406  ---- ----  0116 0655  2245 0951  2013 1457  "
      "**** ****       1659  0204 1334  0448 1118");
  result_strings.push_back(
      "23  1645 1011  2110 0741  2201 0537  ---- ----  ---- ----  0102 0844  2236 1134  1935 1732  "
      "2157 1932  0006 1647  0342 1325  0639 1102");
  result_strings.push_back(
      "24  1841 0957  2249 0730  2349 0524  ---- ----  ---- ----  0050 1027  2225 1320  **** ****  "
      "     1900  0157 1638  0522 1315  0858 1022");
  result_strings.push_back(
      "25  2026 0945       0719       0507  ---- ----  0322 0716  0041 1209  2213 1515  **** ****  "
      "0025 1845  0341 1629  0707 1303  ---- ----");
  result_strings.push_back(
      "26  2205 0934  0032 0705  0157 0436  ---- ----  0301 0915  0031 1352  2154 1726  **** ****  "
      "0227 1833  0420 1520  0902 1245  ---- ----");
  result_strings.push_back(
      "27  2342 0924  0226 0644  ---- ----  0554 0711  0248 1103  0021 1542  **** ****       2107  "
      "0418 1823  0559 1511  ---- ----  ---- ----");
  result_strings.push_back(
      "28       0914  ---- ----  ---- ----  0505 0942  0237 1247  0010 1744  **** ****  0038 2042  "
      "0602 1814  0742 1500  ---- ----  1213 1406");
  result_strings.push_back(
      "29  0121 0901  ---- ----  ---- ----  0447 1140  0227 1431  2331 2009  **** ****  0258 2028  "
      "0743 1805  0931 1446  ---- ----  1140 1618");
  result_strings.push_back(
      "30  0306 0845             ---- ----  0434 1329  0217 1620  **** ****       2348  0458 2017  "
      "0925 1755  1136 1420  ---- ----  1125 1807");
  result_strings.push_back(
      "31  0509 0818             0720 1003             0207 1818             0019 2241  0648 2007  "
      "           ---- ----             1114 1948");

  return result_strings;
}
std::vector<string> helsinki_2013()
{
  std::vector<string> result_strings;

  result_strings.push_back(
      "01  2053 1016       0919  2320 0745  0205 0900  0223 1028  0149 1351  0041 1534  0019 1754  "
      "0138 1824  0255 1724  0443 1530  0625 1440");
  result_strings.push_back(
      "02  2213 1029  0009 0936       0806  0304 1003  0250 1154  0203 1512  0058 1649  0058 1844  "
      "0246 1846  0410 1739  0606 1550  0747 1518");
  result_strings.push_back(
      "03  2335 1042  0135 0958  0045 0833  0349 1119  0309 1319  0217 1630  0118 1800  0146 1925  "
      "0358 1903  0528 1754  0732 1614  0902 1611");
  result_strings.push_back(
      "04       1054  0259 1028  0205 0911  0421 1241  0326 1443  0232 1746  0144 1905  0244 1956  "
      "0513 1919  0647 1809  0856 1646  1002 1720");
  result_strings.push_back(
      "05  0059 1109  0417 1110  0314 1003  0444 1407  0340 1604  0250 1900  0217 2001  0349 2021  "
      "0629 1934  0809 1827  1013 1731  1047 1841");
  result_strings.push_back(
      "06  0225 1127  0523 1208  0408 1110  0503 1531  0354 1723  0312 2009  0259 2048  0459 2041  "
      "0747 1948  0933 1848  1119 1829  1120 2009");
  result_strings.push_back(
      "07  0353 1152  0614 1322  0449 1229  0518 1655  0408 1841  0340 2112  0351 2125  0612 2057  "
      "0907 2003  1056 1914  1211 1942  1145 2138");
  result_strings.push_back(
      "08  0519 1227  0650 1448  0518 1354  0532 1817  0424 1958  0416 2205  0452 2153  0727 2112  "
      "1028 2021  1216 1950  1249 2103  1205 2305");
  result_strings.push_back(
      "09  0636 1317  0716 1618  0539 1522  0546 1937  0444 2110  0502 2248  0559 2215  0844 2125  "
      "1150 2043  1328 2038  1317 2229  1221     ");
  result_strings.push_back(
      "10  0738 1426  0736 1748  0557 1649  0601 2056  0507 2218  0557 2322  0710 2233  1001 2139  "
      "1311 2111  1427 2140  1338 2354  1237 0029");
  result_strings.push_back(
      "11  0822 1550  0752 1916  0612 1814  0618 2212  0538 2318  0701 2347  0824 2248  1121 2155  "
      "1428 2149  1512 2254  1356       1253 0151");
  result_strings.push_back(
      "12  0853 1721  0806 2041  0626 1937  0639 2324  0618       0809       0939 2302  1242 2213  "
      "1536 2241  1546       1412 0119  1310 0311");
  result_strings.push_back(
      "13  0915 1853  0819 2204  0640 2058  0706       0707 0008  0922 0008  1056 2315  1404 2235  "
      "1630 2347  1611 0016  1428 0242  1330 0428");
  result_strings.push_back(
      "14  0932 2022  0834 2323  0656 2216  0740 0029  0806 0047  1036 0024  1214 2329  1524 2306  "
      "1712       1632 0142  1445 0403  1355 0542");
  result_strings.push_back(
      "15  0946 2148  0850       0714 2331  0823 0126  0912 0118  1152 0039  1334 2345  1640 2349  "
      "1743 0105  1649 0308  1503 0523  1426 0651");
  result_strings.push_back(
      "16  0959 2310  0909 0039  0736       0916 0211  1022 0141  1310 0052  1457       1745       "
      "1807 0231  1705 0433  1525 0641  1506 0752");
  result_strings.push_back(
      "17  1012       0933 0152  0805 0041  1017 0247  1135 0200  1430 0106  1621 0004  1837 0047  "
      "1827 0359  1721 0557  1552 0754  1555 0843");
  result_strings.push_back(
      "18  1026 0029  1004 0258  0842 0142  1125 0315  1251 0216  1554 0120  1743 0030  1915 0200  "
      "1844 0528  1739 0720  1627 0901  1652 0925");
  result_strings.push_back(
      "19  1042 0146  1045 0356  0929 0235  1238 0337  1410 0230  1720 0138  1858 0106  1943 0325  "
      "1900 0655  1759 0841  1710 0959  1756 0957");
  result_strings.push_back(
      "20  1103 0300  1137 0444  1026 0316  1354 0355  1531 0244  1847 0200  1959 0156  2005 0456  "
      "1917 0821  1823 0958  1803 1047  1904 1022");
  result_strings.push_back(
      "21  1129 0409  1238 0521  1131 0349  1513 0410  1655 0258  2009 0231  2045 0304  2023 0628  "
      "1935 0944  1853 1109  1903 1124  2015 1042");
  result_strings.push_back(
      "22  1204 0512  1348 0550  1243 0414  1635 0424  1823 0315  2120 0315  2118 0427  2039 0758  "
      "1956 1104  1931 1213  2009 1153  2127 1059");
  result_strings.push_back(
      "23  1250 0606  1502 0613  1359 0434  1800 0439  1953 0335  2213 0416  2143 0558  2055 0925  "
      "2023 1219  2018 1307  2118 1216  2240 1114");
  result_strings.push_back(
      "24  1346 0650  1621 0631  1518 0451  1927 0454  2120 0402  2252 0534  2202 0731  2112 1049  "
      "2056 1327  2114 1350  2230 1235  2355 1128");
  result_strings.push_back(
      "25  1452 0723  1741 0646  1639 0506  2057 0512  2237 0440  2319 0702  2218 0902  2131 1210  "
      "2137 1426  2217 1424  2343 1251       1142");
  result_strings.push_back(
      "26  1604 0749  1904 0700  1803 0520  2226 0536  2338 0533  2340 0834  2234 1030  2153 1327  "
      "2227 1515  2324 1450       1305  0111 1157");
  result_strings.push_back(
      "27  1721 0809  2028 0714  1930 0534  2348 0608       0643  2357 1005  2249 1154  2222 1439  "
      "2326 1554  2335 1411  0058 1319  0231 1215");
  result_strings.push_back(
      "28  1840 0825  2153 0728  2058 0551       0652  0022 0806       1132  2306 1315  2257 1542  "
      "     1624       1429  0216 1334  0353 1238");
  result_strings.push_back(
      "29  2000 0839             2226 0611  0055 0752  0053 0934  0011 1255  2325 1433  2342 1637  "
      "0032 1648  0049 1444  0336 1352  0515 1309");
  result_strings.push_back(
      "30  2121 0852             2350 0636  0147 0906  0116 1102  0026 1416  2349 1546       1721  "
      "0141 1708  0204 1459  0500 1413  0634 1353");
  result_strings.push_back(
      "31  2244 0905                  0812             0134 1228                  1654  0036 1756  "
      "           0322 1514             0743 1452");

  return result_strings;
}

std::vector<string> helsinki_2008()
{
  std::vector<string> result_strings;

  result_strings.push_back(
      "01  0153 1123  0527 0945  0543 0841  0601 1307  0414 1525  0229 1943  0108 2221  0427 2152  "
      "0832 2007  1036 1824  1255 1635  1227 1803");
  result_strings.push_back(
      "02  0318 1123  0652 1006  0625 0949  0603 1445  0415 1703  0234 2139  0156 2310  0615 2154  "
      "1002 2008  1208 1828  1344 1732  1235 1931");
  result_strings.push_back(
      "03  0447 1125  0753 1054  0642 1121  0604 1622  0416 1845  0246 2328  0326 2330  0756 2155  "
      "1132 2009  1339 1837  1409 1851  1239 2059");
  result_strings.push_back(
      "04  0618 1130  0823 1216  0649 1301  0604 1801  0417 2035  0316       0519 2338  0931 2155  "
      "1303 2012  1503 1857  1421 2019  1242 2226");
  result_strings.push_back(
      "05  0748 1142  0834 1354  0652 1442  0604 1942  0420 2231  0426 0040  0710 2341  1102 2155  "
      "1435 2017  1609 1937  1427 2149  1243 2352");
  result_strings.push_back(
      "06  0907 1211  0839 1535  0653 1621  0605 2129  0428       0610 0112  0854 2343  1231 2156  "
      "1605 2028  1648 2044  1431 2318  1244     ");
  result_strings.push_back(
      "07  0955 1314  0840 1715  0653 1759  0607 2322  0446 0027  0802 0124  1029 2343  1400 2157  "
      "1725 2054  1706 2209  1432       1246 0121");
  result_strings.push_back(
      "08  1016 1444  0841 1853  0652 1938  0611       0532 0201  0947 0129  1200 2344  1530 2201  "
      "1820 2145  1715 2341  1434 0047  1248 0254");
  result_strings.push_back(
      "09  1024 1623  0840 2029  0652 2121  0621 0119  0659 0250  1124 0132  1328 2344  1701 2208  "
      "1848 2303  1719       1435 0217  1252 0433");
  result_strings.push_back(
      "10  1027 1802  0840 2207  0653 2308  0646 0307  0846 0309  1254 0133  1455 2345  1828 2223  "
      "1901       1722 0113  1437 0351  1300 0621");
  result_strings.push_back(
      "11  1028 1939  0840 2347  0655       0747 0420  1032 0317  1421 0133  1623 2347  1940 2257  "
      "1907 0034  1723 0245  1440 0530  1316 0812");
  result_strings.push_back(
      "12  1029 2113  0841       0700 0100  0923 0452  1211 0321  1546 0133  1752 2351  2023       "
      "1910 0209  1724 0417  1445 0717  1354 0953");
  result_strings.push_back(
      "13  1028 2248  0843 0133  0712 0252  1109 0504  1343 0322  1712 0133  1922       2043 0001  "
      "1911 0343  1725 0551  1456 0909  1511 1058");
  result_strings.push_back(
      "14  1028       0849 0324  0745 0429  1251 0509  1510 0322  1840 0135  2045 0001  2052 0127  "
      "1912 0516  1727 0729  1521 1059  1659 1128");
  result_strings.push_back(
      "15  1028 0024  0905 0512  0858 0525  1426 0511  1635 0322  2009 0137  2146 0022  2057 0301  "
      "1913 0649  1730 0912  1616 1223  1851 1141");
  result_strings.push_back(
      "16  1029 0205  0949 0639  1040 0547  1556 0511  1800 0322  2138 0143  2220 0107  2059 0436  "
      "1914 0824  1737 1102  1749 1307  2037 1147");
  result_strings.push_back(
      "17  1033 0352  1115 0723  1226 0555  1723 0511  1926 0323  2255 0155  2235 0221  2100 0610  "
      "1915 1003  1752 1253  1937 1325  2216 1150");
  result_strings.push_back(
      "18  1041 0545  1302 0739  1407 0559  1848 0511  2055 0324  2347 0223  2242 0351  2100 0742  "
      "1919 1146  1825 1432  2123 1334  2348 1152");
  result_strings.push_back(
      "19  1105 0732  1449 0745  1542 0600  2014 0511  2225 0327       0318  2245 0525  2100 0914  "
      "1927 1335  1934 1537  2302 1338       1153");
  result_strings.push_back(
      "20  1205 0846  1630 0747  1712 0600  2142 0511  2352 0334  0014 0438  2247 0658  2101 1048  "
      "1945 1522  2113 1607       1341  0117 1154");
  result_strings.push_back(
      "21  1345 0918  1805 0747  1839 0559  2312 0513       0350  0026 0609  2247 0829  2103 1226  "
      "2027 1650  2259 1620  0035 1342  0245 1156");
  result_strings.push_back(
      "22  1537 0929  1936 0747  2006 0559       0516  0103 0424  0031 0742  2247 1000  2107 1410  "
      "2146 1741       1626  0204 1343  0413 1159");
  result_strings.push_back(
      "23  1724 0934  2103 0746  2134 0558  0043 0525  0147 0527  0034 0914  2248 1131  2116 1557  "
      "2329 1803  0041 1629  0331 1344  0542 1205");
  result_strings.push_back(
      "24  1903 0935  2230 0746  2303 0559  0208 0543  0208 0652  0035 1044  2249 1305  2139 1741  "
      "     1812  0217 1630  0458 1346  0710 1216");
  result_strings.push_back(
      "25  2036 0935  2358 0746       0600  0312 0626  0217 0824  0035 1214  2251 1444  2232 1900  "
      "0115 1816  0348 1631  0627 1350  0832 1237");
  result_strings.push_back(
      "26  2204 0935       0746  0035 0604  0347 0737  0221 0957  0036 1346  2257 1629       1939  "
      "0257 1818  0417 1532  0757 1357  0936 1318");
  result_strings.push_back(
      "27  2330 0934  0129 0748  0206 0614  0403 0907  0223 1129  0036 1523  2309 1819  0003 1955  "
      "0434 1819  0545 1533  0924 1410  1015 1425");
  result_strings.push_back(
      "28       0934  0301 0753  0326 0639  0409 1041  0224 1300  0038 1706  2340 2000  0152 2002  "
      "0606 1820  0714 1535  1043 1436  1034 1548");
  result_strings.push_back(
      "29  0056 0934  0430 0807  0421 0732  0413 1216  0225 1432  0042 1857       2106  0340 2005  "
      "0736 1820  0844 1539  1139 1525  1044 1716");
  result_strings.push_back(
      "30  0224 0935             0546 0954  0414 1350  0225 1609  0049 2049  0050 2135  0522 2007  "
      "0905 1821  1015 1547  1211 1637  1049 1845");
  result_strings.push_back(
      "31  0355 0938             0557 1129             0226 1752             0235 2147  0659 2007  "
      "           1142 1603             1052 2011");

  return result_strings;
}

std::vector<string> get_monthly_data(const std::string& data)
{
  std::vector<string> ret;

  ret.push_back(data.substr(0, 2));
  ret.push_back(data.substr(4, 4));
  ret.push_back(data.substr(9, 4));
  ret.push_back(data.substr(15, 4));
  ret.push_back(data.substr(20, 4));
  ret.push_back(data.substr(26, 4));
  ret.push_back(data.substr(31, 4));
  ret.push_back(data.substr(37, 4));
  ret.push_back(data.substr(42, 4));
  ret.push_back(data.substr(48, 4));
  ret.push_back(data.substr(53, 4));
  ret.push_back(data.substr(59, 4));
  ret.push_back(data.substr(64, 4));
  ret.push_back(data.substr(70, 4));
  ret.push_back(data.substr(75, 4));
  ret.push_back(data.substr(81, 4));
  ret.push_back(data.substr(86, 4));
  ret.push_back(data.substr(92, 4));
  ret.push_back(data.substr(97, 4));
  ret.push_back(data.substr(103, 4));
  ret.push_back(data.substr(108, 4));
  ret.push_back(data.substr(114, 4));
  ret.push_back(data.substr(119, 4));
  ret.push_back(data.substr(125, 4));
  ret.push_back(data.substr(130, 4));

  return ret;
}

vector<string> compare_test_data_with_reference_data(unsigned int day,
                                                     const std::vector<string>& monthly_test,
                                                     const std::vector<string>& monthly_ref,
                                                     int& diff_1min,
                                                     int& diff_2min,
                                                     int& diff_3min,
                                                     int& exact_match)
{
  std::vector<std::string> ret_vector;

  diff_1min = 0;
  diff_2min = 0;
  diff_3min = 0;
  exact_match = 0;
  for (unsigned int i = 1; i <= 24; i++)
  {
    int month_number(i % 2 == 0 ? (i / 2) : (i / 2) + 1);
    int day_number(day + 1);

    std::string test_result_string(monthly_test[i]);
    std::string reference_string(monthly_ref[i]);

    trim(test_result_string);
    trim(reference_string);

    if (test_result_string != reference_string)
    {
      bool either_empty(test_result_string.empty() || reference_string.empty());
      bool either_non_numeric(!either_empty && (!std::isdigit(test_result_string.at(0)) ||
                                                !std::isdigit(reference_string.at(0))));
      if (either_empty || either_non_numeric)
      {
        stringstream ss;
        ss << (i % 2 == 1 ? "rise: " : "set: ") << "month#" << month_number << " day#" << day_number
           << ": " << test_result_string << " != " << reference_string;
        ret_vector.push_back(ss.str());
      }
      else
      {
        int hh_test(boost::lexical_cast<int>(test_result_string.substr(0, 2)));
        int mm_test(boost::lexical_cast<int>(test_result_string.substr(2, 2)));
        int hh_ref(boost::lexical_cast<int>(reference_string.substr(0, 2)));
        int mm_ref(boost::lexical_cast<int>(reference_string.substr(2, 2)));

        time_duration test_dur(hours(hh_test) + minutes(mm_test));
        time_duration ref_dur(hours(hh_ref) + minutes(mm_ref));
        time_duration diff_dur(ref_dur - test_dur);

        if (abs(diff_dur.total_seconds()) > 180)
        {
          stringstream ss;
          ss << (i % 2 == 1 ? "rise: " : "set: ") << "month#" << month_number << " day#"
             << day_number << ": " << test_result_string << " != " << reference_string
             << "; difference " << abs(diff_dur.total_seconds()) / 60 << " min";
          ret_vector.push_back(ss.str());
        }

        if (abs(diff_dur.total_seconds()) == 180)
          diff_3min++;
        else if (abs(diff_dur.total_seconds()) == 120)
          diff_2min++;
        else if (abs(diff_dur.total_seconds()) == 60)
          diff_1min++;
      }
    }
    else
    {
      exact_match++;
    }
  }

  return ret_vector;
}

std::vector<std::string> check_result(std::vector<string> test_result,
                                      std::vector<string> reference_result)
{
  std::vector<std::string> ret_vector;

  int diff1min(0);
  int diff2min(0);
  int diff3min(0);
  int exact_match(0);
  for (unsigned int i = 0; i < reference_result.size(); i++)
  {
    std::vector<string> monthly_test_date(get_monthly_data(test_result[i]));
    std::vector<string> monthly_ref_date(get_monthly_data(reference_result[i]));
    int diff1m(0);
    int diff2m(0);
    int diff3m(0);
    int match(0);
    std::vector<std::string> vec = compare_test_data_with_reference_data(
        i, monthly_test_date, monthly_ref_date, diff1m, diff2m, diff3m, match);
    ret_vector.insert(ret_vector.end(), vec.begin(), vec.end());
    diff1min += diff1m;
    diff2min += diff2m;
    diff3min += diff3m;
    exact_match += match;
  }

  stringstream ss;
  ss << "exact matches #" << exact_match;
  ret_vector.push_back(ss.str());
  ss.str("");
  ss << "1 minute differences #" << diff1min;
  ret_vector.push_back(ss.str());
  ss.str("");
  ss << "2 minute differences #" << diff2min;
  ret_vector.push_back(ss.str());
  ss.str("");
  ss << "3 minute differences #" << diff3min;

  return ret_vector;
}

namespace MoonRiseSetTest
{
// ----------------------------------------------------------------------
/*
 * Test moon_rise_set
 */
// ----------------------------------------------------------------------

std::map<int, vector<lunar_time_t> > get_daily_test_data(short year,
                                                         double lat,
                                                         double lon,
                                                         const time_zone_ptr tz)
{
  boost::gregorian::date par1(year, Jan, 1);
  boost::posix_time::time_duration par2(23, 59, 59, 0);
  ptime timeIter(par1, par2);

  std::map<int, vector<lunar_time_t> > results;

  while (timeIter.date().year() == year)
  {
    int month(timeIter.date().month());

    local_date_time ldt(
        timeIter.date(), timeIter.time_of_day(), tz, local_date_time::NOT_DATE_TIME_ON_ERROR);

    lunar_time_t lt = lunar_time(ldt, lon, lat, allow_missing_dates);

    results[month].push_back(lt);

    timeIter += hours(24);
  }

  return results;
}

std::vector<string> get_daily_test_data(const std::map<int, vector<lunar_time_t> >& daily_test_data)
{
  std::vector<string> test_data;

  stringstream result_ss;
  for (unsigned int j = 0; j < 31; j++)
  {
    result_ss.str("");
    result_ss << std::setfill('0') << std::setw(2) << j + 1 << "  ";
    for (unsigned int i = 1; i <= 12; i++)
    {
      if (j < daily_test_data.at(i).size())
      {
        result_ss << daily_test_data.at(i).at(j) << "  ";
      }
      else
        result_ss << "           ";
    }

    test_data.push_back(result_ss.str());
  }

  return test_data;
}

std::vector<string> get_test_data(short year, double lat, double lon, const time_zone_ptr tz)
{
  return get_daily_test_data(get_daily_test_data(year, lat, lon, tz));
}

bool moon_rise_set(
    const std::string& location, short year, double lat, double lon, const time_zone_ptr tz)
{
  std::vector<string> test_data(get_test_data(year, lat, lon, tz));

  std::stringstream ss;
  ss << boost::to_lower_copy(location) << "_" << year;
  std::vector<string> reference_data;

  if (ss.str() == "helsinki_2008")
    reference_data = helsinki_2008();
  else if (ss.str() == "helsinki_2013")
    reference_data = helsinki_2013();
  else if (ss.str() == "oulu_2008")
    reference_data = oulu_2008();
  else if (ss.str() == "utsjoki_2008")
    reference_data = utsjoki_2008();
  else if (ss.str() == "newyork_2008")
    reference_data = newyork_2008();
  else if (ss.str() == "honolulu_2008")
    reference_data = honolulu_2008();
  else
  {
    stringstream ss;
    ss << location << " has no reference data for year " << year;
    TEST_FAILED(ss.str());
  }

  std::vector<string> ret_vector = check_result(test_data, reference_data);
  stringstream ss_received_result;
  for (unsigned int i = 0; i < ret_vector.size(); i++)
  {
    if (!ss_received_result.str().empty()) ss_received_result << endl;
    ss_received_result << ret_vector[i];
  }

  if (ss.str() == "helsinki_2008")
  {
    string expected_str;
    expected_str += "exact matches #484\n";
    expected_str += "1 minute differences #253\n";
    expected_str += "2 minute differences #7";
    if (ss_received_result.str() != expected_str)
      TEST_FAILED(string("Result for Helsinki 2008 should be ") + expected_str + " not " +
                  ss_received_result.str());
  }
  else if (ss.str() == "helsinki_2013")
  {
    string expected_str;
    expected_str += "exact matches #557\n";
    expected_str += "1 minute differences #187\n";
    expected_str += "2 minute differences #0";
    if (ss_received_result.str() != expected_str)
      TEST_FAILED(string("Result for Helsinki 2008 should be ") + expected_str + " not " +
                  ss_received_result.str());
  }
  else if (ss.str() == "oulu_2008")
  {
    string expected_str;
    expected_str += "set: month#6 day#2: 2336 != 2331; difference 5 min\n";
    expected_str += "rise: month#6 day#3: 0044 != 0048; difference 4 min\n";
    expected_str += "rise: month#10 day#3: 1547 != 1541; difference 6 min\n";
    expected_str += "set: month#10 day#3: 1623 != 1629; difference 6 min\n";
    expected_str += "rise: month#6 day#6: **** != 0346\n";
    expected_str += "set: month#6 day#6: **** != 0333\n";
    expected_str += "rise: month#12 day#11: **** != 1112\n";
    expected_str += "set: month#12 day#11: **** != 1010\n";
    expected_str += "rise: month#10 day#17: **** != 1528\n";
    expected_str += "set: month#10 day#17: **** != 1511\n";
    expected_str += "rise: month#5 day#20: ---- != 0007\n";
    expected_str += "set: month#5 day#20: ---- != 0147\n";
    expected_str += "rise: month#10 day#20: **** != 1916\n";
    expected_str += "set: month#10 day#20: **** != 1801\n";
    expected_str += "set: month#7 day#30: 2355 != 2348; difference 7 min\n";
    expected_str += "rise: month#7 day#31: 0011 != 0019; difference 8 min\n";
    expected_str += "exact matches #510\n";
    expected_str += "1 minute differences #193\n";
    expected_str += "2 minute differences #17";
    if (ss_received_result.str() != expected_str)
      TEST_FAILED(string("Result for Oulu 2008 should be ") + expected_str + " not " +
                  ss_received_result.str());
  }
  else if (ss.str() == "utsjoki_2008")
  {
    string expected_str;
    expected_str += "rise: month#12 day#2: ---- != 1544\n";
    expected_str += "set: month#12 day#2: ---- != 1609\n";
    expected_str += "rise: month#2 day#6: ---- != 1154\n";
    expected_str += "set: month#2 day#6: ---- != 1208\n";
    expected_str += "rise: month#6 day#14: 2132 != 2128; difference 4 min\n";
    expected_str += "set: month#6 day#14: 2224 != 2228; difference 4 min\n";
    expected_str += "rise: month#2 day#19: **** != 1155\n";
    expected_str += "set: month#2 day#19: **** != 1028\n";
    expected_str += "rise: month#8 day#22: **** != 1738\n";
    expected_str += "set: month#8 day#22: **** != 1716\n";
    expected_str += "rise: month#3 day#25: 0157 != 0153; difference 4 min\n";
    expected_str += "set: month#3 day#25: 0244 != 0249; difference 5 min\n";
    expected_str += "rise: month#10 day#29: ---- != 1147\n";
    expected_str += "set: month#10 day#29: ---- != 1215\n";
    expected_str += "exact matches #584\n";
    expected_str += "1 minute differences #132\n";
    expected_str += "2 minute differences #14";

    if (ss_received_result.str() != expected_str)
      TEST_FAILED(string("Result for Utsjoki 2008 should be ") + expected_str + " not " +
                  ss_received_result.str());
  }
  else if (ss.str() == "newyork_2008")
  {
    string expected_str;
    expected_str += "exact matches #566\n";
    expected_str += "1 minute differences #178\n";
    expected_str += "2 minute differences #0";
    if (ss_received_result.str() != expected_str)
      TEST_FAILED(string("Result for New York 2008 should be ") + expected_str + " not " +
                  ss_received_result.str());
  }
  else if (ss.str() == "honolulu_2008")
  {
    string expected_str;
    expected_str += "exact matches #622\n";
    expected_str += "1 minute differences #122\n";
    expected_str += "2 minute differences #0";
    if (ss_received_result.str() != expected_str)
      TEST_FAILED(string("Result for Honolulu 2008 should be ") + expected_str + " not " +
                  ss_received_result.str());
  }

#ifdef MYDEBUG
  cout << endl;
  for (unsigned int i = 0; i < ret_vector.size(); i++)
    cout << ret_vector[i] << endl;
#endif
  return true;
}

void moon_rise_set_one_day(const std::string& location,
                           short year,
                           short month,
                           short day,
                           double lat,
                           double lon,
                           const time_zone_ptr tz)
{
  std::cout << std::endl
            << location << " " << year << std::setfill('0') << std::setw(2) << month
            << std::setfill('0') << std::setw(2) << day << std::endl;

  boost::gregorian::date dat(year, month, day);
  boost::posix_time::time_duration tim(0, 0, 0, 0);

  local_date_time ldt(dat, tim, tz, local_date_time::NOT_DATE_TIME_ON_ERROR);

  std::cout << std::endl;

  lunar_time_t lt = lunar_time(ldt, lon, lat, allow_missing_dates);

  std::cout << std::endl << lt << std::endl;

  if (lt.moonrise2_today())
    std::cout << "second rise at " << ldt << ": " << lt.as_string(SECOND_RISE) << std::endl;
  if (lt.moonset2_today())
    std::cout << "second set at " << ldt << ": " << lt.as_string(SECOND_SET) << std::endl;
}

void print_moonrise_moonset_table(
    const std::string& location, short year, double lat, double lon, const time_zone_ptr tz)
{
  std::cout << std::endl << location << " " << year << std::endl << std::endl;

  std::map<int, vector<lunar_time_t> > daily_test_data_details =
      get_daily_test_data(year, lat, lon, tz);

  std::vector<string> test_data(get_daily_test_data(daily_test_data_details));

  std::cout << "       Jan.       Feb.       Mar.       Apr.       May       June       July       "
               " Aug.      Sept.       Oct.       Nov.       Dec     "
            << std::endl;

  BOOST_FOREACH (const std::string& str, test_data)
    std::cout << str << std::endl;

  string second_rises;
  string second_sets;
  for (unsigned int j = 0; j < 31; j++)
  {
    for (unsigned int i = 1; i <= 12; i++)
    {
      if (daily_test_data_details[i].size() <= j) continue;
      if (daily_test_data_details[i][j].moonrise2_today())
      {
        if (!second_rises.empty()) second_rises += ", ";
        second_rises += daily_test_data_details[i][j].as_string_long(SECOND_RISE);
      }
      if (daily_test_data_details[i][j].moonset2_today())
      {
        if (!second_sets.empty()) second_sets += ", ";
        second_sets += daily_test_data_details[i][j].as_string_long(SECOND_SET);
      }
    }
  }

  if (!second_rises.empty())
  {
    cout << "second moonrises: " << endl << second_rises << endl;
  }
  if (!second_sets.empty())
  {
    cout << "second moonsets: " << endl << second_sets << endl;
  }
}

void moonriseset_helsinki2008()
{
  // Helsinki
  double lat_hel(60.151944444);
  double lon_hel(24.950833333);
  time_zone_ptr tz_helsinki(
      Fmi::TimeZoneFactory::instance().time_zone_from_region("Europe/Helsinki"));
  moon_rise_set("Helsinki", 2008, lat_hel, lon_hel, tz_helsinki);

  TEST_PASSED();
}

void moonriseset_helsinki2013()
{
  // Helsinki
  double lat_hel(60.151944444);
  double lon_hel(24.950833333);
  time_zone_ptr tz_helsinki(
      Fmi::TimeZoneFactory::instance().time_zone_from_region("Europe/Helsinki"));
  moon_rise_set("Helsinki", 2013, lat_hel, lon_hel, tz_helsinki);

  TEST_PASSED();
}

void moonriseset_oulu()
{
  // Oulu
  double lat_oul(65.016666667);
  double lon_oul(25.50);
  time_zone_ptr tz_helsinki(
      Fmi::TimeZoneFactory::instance().time_zone_from_region("Europe/Helsinki"));
  moon_rise_set("Oulu", 2008, lat_oul, lon_oul, tz_helsinki);

  TEST_PASSED();
}

void moonriseset_utsjoki()
{
  // Utsjoki
  double lat_uts(69.866666667);
  double lon_uts(27.0);
  time_zone_ptr tz_helsinki(
      Fmi::TimeZoneFactory::instance().time_zone_from_region("Europe/Helsinki"));
  moon_rise_set("Utsjoki", 2008, lat_uts, lon_uts, tz_helsinki);

  TEST_PASSED();
}

void moonriseset_newyork()
{
  // New York
  double lat_nyc(40.733333333);
  double lon_nyc(-73.91666667);
  time_zone_ptr tz_newyork(
      Fmi::TimeZoneFactory::instance().time_zone_from_region("America/New_York"));
  moon_rise_set("NewYork", 2008, lat_nyc, lon_nyc, tz_newyork);

  TEST_PASSED();
}

void moonriseset_honolulu()
{
  // Honolulu
  double lat_hon(21.316666667);
  double lon_hon(-157.8333333);
  time_zone_ptr tz_honolulu(
      Fmi::TimeZoneFactory::instance().time_zone_from_region("Pacific/Honolulu"));
  moon_rise_set("Honolulu", 2008, lat_hon, lon_hon, tz_honolulu);

  TEST_PASSED();
}

void moon_rises_twice()
{
  // Utsjoki
  double lat_uts(69.866666667);
  double lon_uts(27.0);
  time_zone_ptr tz_helsinki(
      Fmi::TimeZoneFactory::instance().time_zone_from_region("Europe/Helsinki"));

  local_date_time ldt(date(2008, 6, 26),
                      time_duration(0, 0, 0, 0),
                      tz_helsinki,
                      local_date_time::NOT_DATE_TIME_ON_ERROR);

  lunar_time_t lt = lunar_time(ldt, lon_uts, lat_uts, allow_missing_dates);

  if (!lt.moonrise2_today() || lt.as_string(FIRST_RISE) != "0021" ||
      lt.as_string(SECOND_RISE) != "2357")
  {
    stringstream ss;
    ss << ldt << " moon should rise twice in Utsjoki: 0021 and 2357";
    TEST_FAILED(ss.str());
  }

  TEST_PASSED();
}

void moon_sets_twice()
{
  // Utsjoki
  double lat_uts(69.866666667);
  double lon_uts(27.0);
  time_zone_ptr tz_helsinki(
      Fmi::TimeZoneFactory::instance().time_zone_from_region("Europe/Helsinki"));

  local_date_time ldt(date(2008, 7, 7),
                      time_duration(0, 0, 0, 0),
                      tz_helsinki,
                      local_date_time::NOT_DATE_TIME_ON_ERROR);

  lunar_time_t lt = lunar_time(ldt, lon_uts, lat_uts, allow_missing_dates);

  if (!lt.moonset2_today() || lt.as_string(FIRST_SET) != "0008" ||
      lt.as_string(SECOND_SET) != "2343")
  {
    stringstream ss;
    ss << ldt << " moon should rise twice in Utsjoki: 0008 and 2343";
    TEST_FAILED(ss.str());
  }

  TEST_PASSED();
}

void lunar_time_t_struct()
{
  // tests lunar_time_t functions
  // Utsjoki
  double lat_uts(69.866666667);
  double lon_uts(27.0);
  time_zone_ptr tz_helsinki(
      Fmi::TimeZoneFactory::instance().time_zone_from_region("Europe/Helsinki"));

  local_date_time ldt(date(2008, 7, 7),
                      time_duration(0, 0, 0, 0),
                      tz_helsinki,
                      local_date_time::NOT_DATE_TIME_ON_ERROR);

  lunar_time_t lt = lunar_time(ldt, lon_uts, lat_uts, allow_missing_dates);

  if (!lt.moonrise_today())
  {
    stringstream ss;
    ss << ldt << " moon should rise in Utsjoki.";
    TEST_FAILED(ss.str());
  }
  if (lt.moonrise2_today())
  {
    stringstream ss;
    ss << ldt << " moon should NOT rise twice in Utsjoki.";
    TEST_FAILED(ss.str());
  }
  if (!lt.moonset_today())
  {
    stringstream ss;
    ss << ldt << " moon should set in Utsjoki.";
    TEST_FAILED(ss.str());
  }
  if (!lt.moonset2_today())
  {
    stringstream ss;
    ss << ldt << " moon should set twice in Utsjoki.";
    TEST_FAILED(ss.str());
  }

  stringstream ss_out;
  ss_out << lt.moonrise << " " << lt.moonrise2 << " " << lt.moonset << " " << lt.moonset2;

  if (ss_out.str() !=
      "2008-Jul-07 09:57:00 EEST not-a-date-time 2008-Jul-07 00:08:00 EEST 2008-Jul-07 23:43:00 "
      "EEST")
  {
    stringstream ss;
    ss << ldt
       << " moon rise- and settimes in Utsjoki should be 2008-Jul-07 09:57:00 EEST "
          "not-a-date-time 2008-Jul-07 00:08:00 EEST 2008-Jul-07 23:43:00 EEST not "
       << ss_out.str();
    TEST_FAILED(ss.str());
  }

  TEST_PASSED();
}

void above_below_horizont_24h()
{
  // Ouly
  double lat_oul(65.016666667);
  double lon_oul(25.50);
  time_zone_ptr tz_helsinki(
      Fmi::TimeZoneFactory::instance().time_zone_from_region("Europe/Helsinki"));

  std::map<int, vector<lunar_time_t> > daily_test_data =
      get_daily_test_data(2008, lat_oul, lon_oul, tz_helsinki);

  stringstream ss_above;
  stringstream ss_below;
  // test elokuu
  int elo(8);
  for (unsigned int j = 0; j < 31; j++)
  {
    if (!daily_test_data[elo][j].moonrise_today() && !daily_test_data[elo][j].moonset_today())
    {
      stringstream& ss_out = (daily_test_data[8][j].above_horizont_24h() ? ss_above : ss_below);
      if (!ss_out.str().empty()) ss_out << " ";
      ss_out << std::setfill('0') << std::setw(2) << j + 1 << "." << std::setfill('0')
             << std::setw(2) << elo;
    }
  }

  if (ss_above.str() != "24.08 25.08 26.08")
  {
    stringstream ss;
    ss << "In year 2008 in Utsjoki the moon is above horizont in august 24 hours in the following "
          "days: 24.08 25.08 26.08, not "
       << ss_above.str();
    TEST_FAILED(ss.str());
  }
  if (ss_below.str() != "10.08 11.08 12.08 13.08")
  {
    stringstream ss;
    ss << "In year 2008 in Utsjoki the moon is below horizont in august 24 hours in the following "
          "days: 10.08 11.08 12.08 13.08, not "
       << ss_below.str();
    TEST_FAILED(ss.str());
  }

  TEST_PASSED();
}

void moonriseset()
{
  /*
    print_moonrise_moonset_table("Helsinki", 2008, lat_hel, lon_hel, tz_helsinki);
    moon_rise_set_one_day("Helsinki", 2008, 3, 29, lat_hel, lon_hel, tz_helsinki);
  */

  double lat_uts(69.866666667);
  double lon_uts(27.0);
  //	double lat_hel(60.151944444);
  //	double lon_hel(24.950833333);
  time_zone_ptr tz_helsinki(
      Fmi::TimeZoneFactory::instance().time_zone_from_region("Europe/Helsinki"));
  // moon_rise_set_one_day("Helsinki", 2013, 10, 26, lat_hel, lon_hel, tz_helsinki);
  //	moon_rise_set_one_day("Helsinki", 2013, 10, 27, lat_hel, lon_hel, tz_helsinki);
  //	moon_rise_set_one_day("Helsinki", 2013, 10, 28, lat_hel, lon_hel, tz_helsinki);
  //	moon_rise_set_one_day("Helsinki", 2013, 10, 29, lat_hel, lon_hel, tz_helsinki);
  //  print_moonrise_moonset_table("Helsinki", 2014, lat_hel, lon_hel, tz_helsinki);
  print_moonrise_moonset_table("Utsjoki", 2008, lat_uts, lon_uts, tz_helsinki);
  print_moonrise_moonset_table("Utsjoki", 2009, lat_uts, lon_uts, tz_helsinki);
  print_moonrise_moonset_table("Utsjoki", 2010, lat_uts, lon_uts, tz_helsinki);
  print_moonrise_moonset_table("Utsjoki", 2011, lat_uts, lon_uts, tz_helsinki);
  print_moonrise_moonset_table("Utsjoki", 2012, lat_uts, lon_uts, tz_helsinki);
  print_moonrise_moonset_table("Utsjoki", 2013, lat_uts, lon_uts, tz_helsinki);
  print_moonrise_moonset_table("Utsjoki", 2014, lat_uts, lon_uts, tz_helsinki);
  print_moonrise_moonset_table("Utsjoki", 2015, lat_uts, lon_uts, tz_helsinki);
  print_moonrise_moonset_table("Utsjoki", 2016, lat_uts, lon_uts, tz_helsinki);

  TEST_PASSED();
}

// ----------------------------------------------------------------------
/*!
 * The actual test suite
 */
// ----------------------------------------------------------------------

class tests : public tframe::tests
{
  virtual const char* error_message_prefix() const { return "\n\t"; }
  void test(void)
  {
    TEST(moonriseset_helsinki2013);
    TEST(moonriseset_helsinki2008);
    TEST(moonriseset_oulu);
    TEST(moonriseset_utsjoki);
    TEST(moonriseset_newyork);
    TEST(moonriseset_honolulu);
    TEST(moon_rises_twice);
    TEST(moon_sets_twice);
    TEST(lunar_time_t_struct);
    TEST(above_below_horizont_24h);

    //	  TEST(moonriseset);
  }
};

}  // namespace MoonRiseSetTest

//! The main program
int main(void)
{
  using namespace std;
  cout << endl << "MoonRiseSetTest" << endl << "===============" << endl;
  MoonRiseSetTest::tests t;
  return t.run();
}

// ======================================================================
